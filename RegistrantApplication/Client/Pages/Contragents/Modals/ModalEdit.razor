@using RegistrantApplication.ApiLibrary;
@using RegistrantApplication.Shared.API.Accounts
@using RegistrantApplication.Shared.Contragents;
@using Blazored.LocalStorage
@inherits ModalCreate

@inject RApi api;
@inject ISyncLocalStorageService Storage;

@if (IsDisplay)
{
    <div id="@IdModal" class="relative z-10 @Property" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <!--
          Background backdrop, show/hide based on modal state.

          Entering: "ease-out duration-300"
            From: "opacity-0"
            To: "opacity-100"
          Leaving: "ease-in duration-200"
            From: "opacity-100"
            To: "opacity-0"
        -->
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity @PropertyBlur"></div>

        <EditForm Model="Contragent" OnSubmit="Sumbit">
            <div class="fixed inset-0 z-10 overflow-y-auto">
                <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0 @Property1">
                    <!--
                      Modal panel, show/hide based on modal state.

                      Entering: "ease-out duration-300"
                        From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                        To: "opacity-100 translate-y-0 sm:scale-100"
                      Leaving: "ease-in duration-200"
                        From: "opacity-100 translate-y-0 sm:scale-100"
                        To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                    -->
                    <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                        <div>
                            <div class="mt-3 text-left sm:mt-1">
                                <h3 class="text-lg font-medium leading-6 text-gray-900" id="modal-title">@Contragent.Title</h3>
                                <div class="mt-2">
                                    <div class="relative rounded-md border border-gray-300 px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
                                        <input type="text" @bind-value="Contragent.Title" class="block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm" placeholder="Название контрагента">
                                    </div>
                                    <div class="mt-2 relative rounded-md border border-gray-300 px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
                                        <input type="text" disabled value="@Contragent.DateTimeCreated.ToString()" class="block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm">
                                    </div>
                                    <div class="mt-2 relative rounded-md border border-gray-300 px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
                                        <input type="checkbox" @bind="Contragent.IsDeleted" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500">
                                        <label class="font-medium text-gray-700">Удален</label>
                                    </div>

                                    @if (!string.IsNullOrEmpty(ErrorMessageContent))
                                    {
                                        <div class="mt-2 border-l-4 border-yellow-400 bg-yellow-50 p-4">
                                            <div class="flex">
                                                <div class="flex-shrink-0">
                                                    <!-- Heroicon name: mini/exclamation-triangle -->
                                                    <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                        <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                                                    </svg>
                                                </div>
                                                <div class="ml-3">
                                                    <p class="text-sm text-yellow-700">
                                                        @ErrorMessageContent.Replace("\"", string.Empty)
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                </div>
                            </div>
                        </div>
                        <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                            <button type="submit" class="inline-flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-indigo-700  sm:col-start-2 sm:text-sm">Сохранить</button>
                            <button type="button" @onclick="CloseAsync" class="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 sm:col-start-1 sm:mt-0 sm:text-sm">Отмена</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {
    
    
    public override async void Sumbit()
    {
        var result = await api.Contragents.Update(token: Storage.GetItem<SessionResult>("lastSession").Token, Contragent);

        if (result.IsSuccessStatusCode)
            CloseAsync();
        else
            ErrorMessageContent = result.Content;
        StateHasChanged();
    }

    public async Task<bool> Show(Contragent contragent)
    {
        Contragent = contragent;
        ErrorMessageContent = null;

        IdModal = Guid.NewGuid().ToString();
        ShowAsync();
        
        return await Task.Run(WaitForResult);
    }
}
