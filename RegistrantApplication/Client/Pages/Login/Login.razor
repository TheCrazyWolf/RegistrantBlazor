@page "/security/action/login"
@layout SecurityLayout;
@implements RegistrantApplication.Shared.IModal

@using RegistrantApplication.ApiLibrary
@using Blazored.LocalStorage
@using Newtonsoft.Json
@using RegistrantApplication.Shared.API.Accounts

@inject RApi Api;
@inject ISyncLocalStorageService StorageService;
@inject NavigationManager Navigation;

<div class="relative z-10  @PropertySmoothShowBackground" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity @PropertyBlur"></div>
    <div class="fixed inset-0 z-10 w-screen overflow-y-auto ">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0 @PropertySmoothShowModal">
            <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div class=" sm:items-start">
                        <div class="text-center sm:mt-0 sm:text-left">
                            <h3 class="text-lg font-medium leading-6 text-gray-900" id="modal-title">@PropertyTitle</h3>
                            <div class="mt-2">
                                <form>
                                    <div class="mt-4 relative rounded-md border border-gray-300 px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
                                        <label class="absolute -top-2 left-2 -mt-px inline-block bg-white px-1 text-xs font-medium text-gray-900">Номер телефона</label>
                                        <input type="text" @bind-value="Phone" class="block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm" placeholder="9ХХХХХХХХХ">
                                    </div>
                                    <div class="mt-4 relative rounded-md border border-gray-300 px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
                                        <label class="absolute -top-2 left-2 -mt-px inline-block bg-white px-1 text-xs font-medium text-gray-900">Пароль</label>
                                        <input type="password" @bind-value="Password" class="block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm" placeholder="Пароль для учетной записи">
                                    </div>
                                    <div class="mt-2">
                                        <div class="relative flex gap-x-3">
                                            <div class="flex h-6 items-center">
                                                <input @bind="IsEmployee" name="IsEmployee" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600">
                                            </div>
                                            <div class="text-sm leading-6">
                                                <label name="IsEmployee" class="font-medium text-gray-900">Войти с ролью сотрудника</label>
                                                <p name="IsEmployee" class="text-gray-500">Будет открыта панель управления заказами</p>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>

                            @if (!string.IsNullOrEmpty(PropertyErrorMsg))
                            {
                                <div class="mt-2 border-l-4 border-yellow-400 bg-yellow-50 p-4">
                                    <div class="flex">
                                        <div class="flex-shrink-0">
                                            <!-- Heroicon name: mini/exclamation-triangle -->
                                            <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"/>
                                            </svg>
                                        </div>
                                        <div class="ml-3">
                                            <p class="text-sm text-yellow-700">
                                                @PropertyErrorMsg.Replace("\"", string.Empty)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">

                    <button type="button" @onclick="SubmitAsync" class="inline-flex w-full justify-center rounded-md bg-blue-600 px-3 py-2 text-sm font-normal text-white shadow-sm hover:bg-blue-500 sm:ml-3 sm:w-auto">Авторизация</button>
                    @*<button type="button" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-normal text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Вход для водителей</button>*@
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string Phone { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Password { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsEmployee { get; set; }


    public string IdModal { get; set; }
    public bool IsDisplay { get; set; }
    public string PropertyTitle { get; set; }
    public string PropertySmoothShowBackground { get; set; }
    public string PropertySmoothShowModal { get; set; }
    public string PropertyBlur { get; set; }
    public string PropertyErrorMsg { get; set; }

    public Login()
    {
        IdModal = "DefaultAuth";
        IsDisplay = true;
        PropertyTitle = "Вход в систему";
        PropertySmoothShowBackground = "ease-out duration-200 opacity-0";
        PropertySmoothShowModal = "ease-in duration-200 opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95";
        PropertyBlur = "backdrop-blur-md";
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ShowAsync();
    }

    public async void SubmitAsync()
    {
        PropertySmoothShowBackground = "ease-out duration-200 opacity-0";
        PropertySmoothShowModal = "ease-in duration-200 opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95";
        StateHasChanged();

        if (string.IsNullOrEmpty(Phone))
        {
            PropertyErrorMsg = "Не заполнены обязательные поля";
            return;
        }

        var responce = await Api.Security.GetToken(phone: Phone, password: Password, isEmployee: true, family: null, fingerprint: "");
        if (!responce.IsSuccessStatusCode)
        {
            PropertyErrorMsg = responce.Content;
            PropertySmoothShowBackground = "ease-out duration-200 opacity-100";
            PropertySmoothShowModal = "ease-out duration-200 opacity-100 translate-y-0 sm:scale-100";
            StateHasChanged();
            return;
        }

        SessionResult result = JsonConvert.DeserializeObject<SessionResult>(responce.Content);
        StorageService.SetItem<SessionResult>("lastSession", result);
        Navigation.NavigateTo("/");
    }
    
    public async Task<bool> ShowAsync()
    {
        await Task.Delay(250);
        PropertySmoothShowBackground = "ease-out duration-200 opacity-100";
        PropertySmoothShowModal = "ease-out duration-200 opacity-100 translate-y-0 sm:scale-100";
        IsEmployee = true;
        StateHasChanged();
        return await Task.Run(WaitForResult);
    }

    public async void CloseAsync()
    {
        await Task.Delay(10);
        PropertySmoothShowBackground = "ease-out duration-200 opacity-0";
        PropertySmoothShowModal = "ease-in duration-200 opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95";
        StateHasChanged();
    }
    
    public async Task<bool> WaitForResult()
    {
        while (IsDisplay)
        {
            await Task.Delay(150);
        }

        return true;
    }
}