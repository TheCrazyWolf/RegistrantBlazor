@page "/security/action/logout"
@using RegistrantApplication.ApiLibrary
@using Blazored.LocalStorage
@using RegistrantApplication.Shared.API.Accounts
@layout SecurityLayout;

@inject RApi Api;
@inject ISyncLocalStorageService StorageService;
@inject NavigationManager Navigation;

<div class="relative z-10  @propertySmoothShowBackground" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity @PropertyBlur"></div>
    <div class="fixed inset-0 z-10 w-screen overflow-y-auto ">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0 @propertySmoothShowModal">
            <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div class=" sm:items-start">
                        <div class="text-center sm:mt-0 sm:text-left">
                            <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Завершение сеанса</h3>
                            <div class="mt-2">
                                <label class="block text-sm font-medium leading-6 text-gray-900">Вы будете перенаправлены на страницу авторизации</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private string? propertySmoothShowBackground = "ease-out duration-200 opacity-0";
    private string propertySmoothShowModal = "ease-in duration-200 opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95";
    public string PropertyBlur = "backdrop-blur-md";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(10);
        propertySmoothShowBackground = "ease-out duration-200 opacity-100";
        propertySmoothShowModal = "ease-out duration-200 opacity-100 translate-y-0 sm:scale-100";
        StateHasChanged();
        LogoutAsync();
    }

    private async void LogoutAsync()
    {
        await Task.Delay(1000);

        var sessionCurrent = StorageService.GetItem<SessionResult>("lastSession");
        if(sessionCurrent == null)
        {
            Navigation.NavigateTo("/security/action/login");
            return;
        }

        string[] tokens = new[] { sessionCurrent.Token };
        await Api.Security.PostResetToken(tokens);
        StorageService.RemoveItem("lastSession");
        Navigation.NavigateTo("/security/action/login");
    }
    
}