// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistrantApplication.Server.Database;

#nullable disable

namespace RegistrantApplication.Server.Migrations
{
    [DbContext(typeof(LiteContext))]
    [Migration("20231008164409_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("RegistrantApplication.Shared.Accounts.Account", b =>
                {
                    b.Property<long>("IdAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("IdAccount");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Contragents.Contragent", b =>
                {
                    b.Property<long>("IdContragent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdContragent");

                    b.ToTable("Contragents");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Drivers.Auto", b =>
                {
                    b.Property<long>("IdAuto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutoNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("DriverIdDriver")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdAuto");

                    b.HasIndex("DriverIdDriver");

                    b.ToTable("Autos");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Drivers.Document", b =>
                {
                    b.Property<long>("IdDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountIdAccount")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<long?>("DriverIdDriver")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdDocument");

                    b.HasIndex("AccountIdAccount");

                    b.HasIndex("DriverIdDriver");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Drivers.Driver", b =>
                {
                    b.Property<long>("IdDriver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("IdDriver");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Orders.Order", b =>
                {
                    b.Property<long>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AutoIdAuto")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ContragentIdContragent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateTimeArrived")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeCreatedOrder")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeEndOrder")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeLeft")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimePlannedArrive")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeRegistration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeStartOrder")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DriverIdDriver")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdOrder");

                    b.HasIndex("AutoIdAuto");

                    b.HasIndex("ContragentIdContragent");

                    b.HasIndex("DriverIdDriver");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Orders.OrderDetails", b =>
                {
                    b.Property<long>("IdOrderDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountPodons")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nomenclature")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumRealese")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PacketDocuments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("StoreKeeperIdAccount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TochkaLoad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeLoad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdOrderDetails");

                    b.HasIndex("StoreKeeperIdAccount");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Drivers.Auto", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Drivers.Driver", null)
                        .WithMany("Autos")
                        .HasForeignKey("DriverIdDriver")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Drivers.Document", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Accounts.Account", null)
                        .WithMany("Documents")
                        .HasForeignKey("AccountIdAccount")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegistrantApplication.Shared.Drivers.Driver", null)
                        .WithMany("Documents")
                        .HasForeignKey("DriverIdDriver")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Orders.Order", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Drivers.Auto", "Auto")
                        .WithMany()
                        .HasForeignKey("AutoIdAuto")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegistrantApplication.Shared.Contragents.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("ContragentIdContragent")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegistrantApplication.Shared.Drivers.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverIdDriver")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Auto");

                    b.Navigation("Contragent");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Orders.OrderDetails", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Accounts.Account", "StoreKeeper")
                        .WithMany()
                        .HasForeignKey("StoreKeeperIdAccount")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StoreKeeper");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Accounts.Account", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Drivers.Driver", b =>
                {
                    b.Navigation("Autos");

                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
