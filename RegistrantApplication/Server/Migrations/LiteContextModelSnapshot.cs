// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistrantApplication.Server.Database;

#nullable disable

namespace RegistrantApplication.Server.Migrations
{
    [DbContext(typeof(LiteContext))]
    partial class LiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Accounts.Account", b =>
                {
                    b.Property<long>("IdAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountRoleIdRole")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("IdAccount");

                    b.HasIndex("AccountRoleIdRole");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Accounts.AccountRole", b =>
                {
                    b.Property<long>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanChangeRoles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanCreateAccounts")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanCreateAutos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanCreateContragents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanCreateDocuments")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanCreateOrderDetails")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanCreateOrders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanCreateRoles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteAccounts")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteAutos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteContragents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteDocuments")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteOrderDetails")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteOrders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteRoles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditAccount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditAutos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditContragents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditDocuments")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditOrderDetails")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditOrders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditRoles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanLogin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewAccounts")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewAutos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewContragents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewDocuments")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewLogs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewOrderDetails")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewOrders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewRoles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdRole");

                    b.ToTable("AccountRoles");

                    b.HasData(
                        new
                        {
                            IdRole = 1L,
                            CanChangeRoles = false,
                            CanCreateAccounts = false,
                            CanCreateAutos = false,
                            CanCreateContragents = false,
                            CanCreateDocuments = false,
                            CanCreateOrderDetails = false,
                            CanCreateOrders = false,
                            CanCreateRoles = false,
                            CanDeleteAccounts = false,
                            CanDeleteAutos = false,
                            CanDeleteContragents = false,
                            CanDeleteDocuments = false,
                            CanDeleteOrderDetails = false,
                            CanDeleteOrders = false,
                            CanDeleteRoles = false,
                            CanEditAccount = false,
                            CanEditAutos = false,
                            CanEditContragents = false,
                            CanEditDocuments = false,
                            CanEditOrderDetails = false,
                            CanEditOrders = false,
                            CanEditRoles = false,
                            CanLogin = true,
                            CanViewAccounts = false,
                            CanViewAutos = false,
                            CanViewContragents = false,
                            CanViewDocuments = false,
                            CanViewLogs = false,
                            CanViewOrderDetails = false,
                            CanViewOrders = false,
                            CanViewRoles = false,
                            IsDefault = true,
                            Title = "Гость"
                        });
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Accounts.Session", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<long>("AccountIdAccount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeSessionExpired")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeSessionStarted")
                        .HasColumnType("TEXT");

                    b.Property<string>("FingerPrintIdentity")
                        .HasColumnType("TEXT");

                    b.HasKey("Token");

                    b.HasIndex("AccountIdAccount");

                    b.ToTable("AccountsSessions");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Admin.Event", b =>
                {
                    b.Property<long>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountIdAccount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeEvent")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueAfter")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueBefore")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueObject")
                        .HasColumnType("TEXT");

                    b.HasKey("IdEvent");

                    b.HasIndex("AccountIdAccount");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Contragents.Contragent", b =>
                {
                    b.Property<long>("IdContragent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdContragent");

                    b.ToTable("Contragents");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Drivers.Auto", b =>
                {
                    b.Property<long>("IdAuto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountIdAccount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutoNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("IdAuto");

                    b.HasIndex("AccountIdAccount");

                    b.ToTable("AccountsAutos");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Drivers.Document", b =>
                {
                    b.Property<long>("IdDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountIdAccount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Authority")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FileDocumentIdFile")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdDocument");

                    b.HasIndex("AccountIdAccount");

                    b.HasIndex("FileDocumentIdFile");

                    b.ToTable("AccountsDocuments");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Drivers.FileDocument", b =>
                {
                    b.Property<long>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DataBytes")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdFile");

                    b.ToTable("AccountsFileDocuments");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Orders.Order", b =>
                {
                    b.Property<long>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountIdAccount")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AutoIdAuto")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ContragentIdContragent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateTimeArrived")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeCreatedOrder")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeEndOrder")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeLeft")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimePlannedArrive")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeRegistration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeStartOrder")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OrderDetailIdOrderDetails")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdOrder");

                    b.HasIndex("AccountIdAccount");

                    b.HasIndex("AutoIdAuto");

                    b.HasIndex("ContragentIdContragent");

                    b.HasIndex("OrderDetailIdOrderDetails");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Orders.OrderDetail", b =>
                {
                    b.Property<long>("IdOrderDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountPodons")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nomenclature")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumRealese")
                        .HasColumnType("TEXT");

                    b.Property<string>("PacketDocuments")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<long?>("StoreKeeperIdAccount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TochkaLoad")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeLoad")
                        .HasColumnType("TEXT");

                    b.HasKey("IdOrderDetails");

                    b.HasIndex("StoreKeeperIdAccount");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Accounts.Account", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Database.Accounts.AccountRole", "AccountRole")
                        .WithMany()
                        .HasForeignKey("AccountRoleIdRole")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountRole");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Accounts.Session", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Database.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountIdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Admin.Event", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Database.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountIdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Drivers.Auto", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Database.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountIdAccount")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Drivers.Document", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Database.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountIdAccount")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegistrantApplication.Shared.Database.Drivers.FileDocument", "FileDocument")
                        .WithMany()
                        .HasForeignKey("FileDocumentIdFile")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("FileDocument");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Orders.Order", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Database.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountIdAccount")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegistrantApplication.Shared.Database.Drivers.Auto", "Auto")
                        .WithMany()
                        .HasForeignKey("AutoIdAuto")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegistrantApplication.Shared.Database.Contragents.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("ContragentIdContragent")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegistrantApplication.Shared.Database.Orders.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailIdOrderDetails")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Auto");

                    b.Navigation("Contragent");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("RegistrantApplication.Shared.Database.Orders.OrderDetail", b =>
                {
                    b.HasOne("RegistrantApplication.Shared.Database.Accounts.Account", "StoreKeeper")
                        .WithMany()
                        .HasForeignKey("StoreKeeperIdAccount")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StoreKeeper");
                });
#pragma warning restore 612, 618
        }
    }
}
